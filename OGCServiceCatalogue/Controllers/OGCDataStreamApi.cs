/*
 * Edge Connection Manager
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OGCServiceCatalogue.Attributes;
using OGCServiceCatalogue.Models;

namespace OGCServiceCatalogue.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class OGCDataStreamApiController : Controller
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get OGC Data Stream Info from GOST using Data Stream ID</remarks>
        /// <param name="dataStreamId"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpGet]
        [Route("/GetOGCDataStreamInfo/{DataStreamId}")]
        [ValidateModelState]
        [SwaggerOperation("GetOGCDataStreamInfoDataStreamIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(OgcDataStreamInfo), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult GetOGCDataStreamInfoDataStreamIdGet([FromRoute][Required]int? DataStreamId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OgcDataStreamInfo));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"ExternalId\" : \"ExternalId\",\n  \"MqttTopic\" : \"MqttTopic\",\n  \"Metadata\" : \"Metadata\",\n  \"MqttServer\" : \"MqttServer\",\n  \"DataStremId\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OgcDataStreamInfo>(exampleJson)
            : default(OgcDataStreamInfo);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// 
        /// </summary>
        /// <remarks>Get OGC Data Stream Info from GOST using Data Stream ID</remarks>
        /// <param name="dataStreamId"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpGet]
        [Route("/GetMQTTInfo")]
        [ValidateModelState]
        [SwaggerOperation("GetMQTTInfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult GetMQTTInfo()
        {
           

            string exampleJson = null;
            exampleJson = "{\n  \"MqttServer\" : \"goeasy.cloudapp.net:1883\"\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OgcDataStreamInfo>(exampleJson)
            : default(OgcDataStreamInfo);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get the associated OGCDataStream Using an  external ID and metadata</remarks>
        /// <param name="search"></param>
        /// <response code="200">Success</response>
        /// <response code="0">Error</response>
        [HttpPost]
        [Route("/SearchOrCreateOGCDataStreamId")]
        [ValidateModelState]
        [SwaggerOperation("SearchOrCreateOGCDataStreamId")]
        [SwaggerResponse(statusCode: 200, type: typeof(OgcDataStreamInfo), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Error")]
        public virtual IActionResult SearchOGCDataStreamIdPost([FromBody]SearchOgcDataStreamInfo search)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OgcDataStreamInfo));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));


            if (!ModelState.IsValid)
            {
                var error = ModelState.SelectMany(x => x.Value.Errors).First();
                if (error.ErrorMessage != null && error.ErrorMessage != String.Empty)
                {
                    return BadRequest(error.ErrorMessage);
                }
                else if (error.Exception?.Message != null)
                {
                    return BadRequest("Faulty input");
                }
                else
                    return BadRequest(ModelState);

            }

            ManageDataStreams mds = new ManageDataStreams();
            OgcDataStreamInfo ods = new OgcDataStreamInfo();
            ods.ExternalId = search.ExternalId;
            ods.Metadata = search.Metadata;
            ods.SensorType = search.SensorType;
            ods.UnitOfMeasurement = search.UnitOfMeasurement;
            ods.fixedLatitude = search.fixedLatitude;
            ods.fixedLongitude = search.fixedLongitude;
            mds.FindOrCreateDatastream(ref ods);
            //TODO: Change the data returned
            return new ObjectResult(ods);
        }
    }
}
